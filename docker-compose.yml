version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: academia-pro-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: academia_pro
      POSTGRES_USER: academia_user
      POSTGRES_PASSWORD: academia_password
      POSTGRES_ROOT_PASSWORD: root_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - academia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U academia_user -d academia_pro"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: academia-pro-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - academia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NestJS Backend API
  backend:
    build:
      context: .
      dockerfile: server/Dockerfile.backend
    container_name: academia-pro-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://academia_user:academia_password@postgres:5432/academia_pro
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      BCRYPT_ROUNDS: 12
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: academia_user
      DB_PASSWORD: academia_password
      DB_NAME: academia_pro
    ports:
      - "3001:3001"
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./common:/app/common
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - academia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: client/Dockerfile.frontend
  #   container_name: academia-pro-frontend
  #   restart: unless-stopped
  #   environment:
  #     NEXT_PUBLIC_API_BASE_URL: http://backend:3000
  #     NEXT_PUBLIC_ENVIRONMENT: development
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./client:/app
  #     - /app/node_modules
  #     - /app/.next
  #     - ./common:/app/common
  #   depends_on:
  #     - backend
  #   networks:
  #     - academia-network

  # Nginx Reverse Proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: academia-pro-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./docker/nginx/ssl:/etc/nginx/ssl:ro
  #     - nginx_logs:/var/log/nginx
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - academia-network

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: academia-pro-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@academia-pro.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - academia-network

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: academia-pro-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - academia-network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  nginx_logs:

networks:
  academia-network:
    driver: bridge